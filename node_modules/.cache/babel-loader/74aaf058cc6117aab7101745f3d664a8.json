{"ast":null,"code":"import axios from 'axios';\nimport store from \"../redux/configStore\";\nimport { jwtUtils } from \"./jwtUtils\";\nconst instance = axios.create({\n  // baseURL: process.env.NODE_ENV === 'production' ? '' : 'https://api.eastflag.co.kr'\n  baseURL: process.env.NODE_ENV === 'production' ? '' : ''\n});\n/**\n 1. 요청 인터셉터\n 2개의 콜백 함수를 받습니다.\n */\n\ninstance.interceptors.request.use(config => {\n  // HTTP Authorization 요청 헤더에 jwt-token을 넣음\n  // 서버측 미들웨어에서 이를 확인하고 검증한 후 해당 API에 요청함.\n  const token = store.getState().Auth.token;\n\n  try {\n    if (token && jwtUtils.isAuth(token)) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    return config;\n  } catch (err) {\n    console.error('[_axios.interceptors.request] config : ' + err);\n  }\n\n  return config;\n}, error => {\n  // 요청 에러 직전 호출됩니다.\n  return Promise.reject(error);\n});\n/**\n 2. 응답 인터셉터\n 2개의 콜백 함수를 받습니다.\n */\n\ninstance.interceptors.response.use(response => {\n  /*\n      http status가 200인 경우\n      응답 성공 직전 호출됩니다.\n      .then() 으로 이어집니다.\n  */\n  return response;\n}, error => {\n  /*\n      http status가 200이 아닌 경우\n      응답 에러 직전 호출됩니다.\n      .catch() 으로 이어집니다.\n  */\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","store","jwtUtils","instance","create","baseURL","process","env","NODE_ENV","interceptors","request","use","config","token","getState","Auth","isAuth","headers","Authorization","err","console","error","Promise","reject","response"],"sources":["C:/Users/avocado-dev/Desktop/Programming/Board-FE-React-main/Board-FE-React-main/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\nimport store from \"../redux/configStore\";\nimport {jwtUtils} from \"./jwtUtils\";\n\nconst instance = axios.create({\n  // baseURL: process.env.NODE_ENV === 'production' ? '' : 'https://api.eastflag.co.kr'\n  baseURL: process.env.NODE_ENV === 'production' ? '' : ''\n})\n\n/**\n 1. 요청 인터셉터\n 2개의 콜백 함수를 받습니다.\n */\ninstance.interceptors.request.use(\n  (config) => {\n    // HTTP Authorization 요청 헤더에 jwt-token을 넣음\n    // 서버측 미들웨어에서 이를 확인하고 검증한 후 해당 API에 요청함.\n    const token = store.getState().Auth.token;\n    try {\n      if (token && jwtUtils.isAuth(token)) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n\n      return config;\n    } catch (err) {\n      console.error('[_axios.interceptors.request] config : ' + err);\n    }\n    return config;\n  },\n  (error) => {\n    // 요청 에러 직전 호출됩니다.\n    return Promise.reject(error);\n  }\n);\n\n/**\n 2. 응답 인터셉터\n 2개의 콜백 함수를 받습니다.\n */\ninstance.interceptors.response.use(\n  (response) => {\n    /*\n        http status가 200인 경우\n        응답 성공 직전 호출됩니다.\n        .then() 으로 이어집니다.\n    */\n\n    return response;\n  },\n\n  (error) => {\n    /*\n        http status가 200이 아닌 경우\n        응답 에러 직전 호출됩니다.\n        .catch() 으로 이어집니다.\n    */\n    return Promise.reject(error);\n  }\n);\n\nexport default instance;"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAAQC,QAAR,QAAuB,YAAvB;AAEA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa;EAC5B;EACAC,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,EAAxC,GAA6C;AAF1B,CAAb,CAAjB;AAKA;AACA;AACA;AACA;;AACAL,QAAQ,CAACM,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACGC,MAAD,IAAY;EACV;EACA;EACA,MAAMC,KAAK,GAAGZ,KAAK,CAACa,QAAN,GAAiBC,IAAjB,CAAsBF,KAApC;;EACA,IAAI;IACF,IAAIA,KAAK,IAAIX,QAAQ,CAACc,MAAT,CAAgBH,KAAhB,CAAb,EAAqC;MACnCD,MAAM,CAACK,OAAP,CAAeC,aAAf,GAAgC,UAASL,KAAM,EAA/C;IACD;;IAED,OAAOD,MAAP;EACD,CAND,CAME,OAAOO,GAAP,EAAY;IACZC,OAAO,CAACC,KAAR,CAAc,4CAA4CF,GAA1D;EACD;;EACD,OAAOP,MAAP;AACD,CAfH,EAgBGS,KAAD,IAAW;EACT;EACA,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAnBH;AAsBA;AACA;AACA;AACA;;AACAlB,QAAQ,CAACM,YAAT,CAAsBe,QAAtB,CAA+Bb,GAA/B,CACGa,QAAD,IAAc;EACZ;AACJ;AACA;AACA;AACA;EAEI,OAAOA,QAAP;AACD,CATH,EAWGH,KAAD,IAAW;EACT;AACJ;AACA;AACA;AACA;EACI,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAlBH;AAqBA,eAAelB,QAAf"},"metadata":{},"sourceType":"module"}