{"ast":null,"code":"import axios from'axios';import store from\"../redux/configStore\";import{jwtUtils}from\"./jwtUtils\";var instance=axios.create({// baseURL: process.env.NODE_ENV === 'production' ? '' : 'https://api.eastflag.co.kr'\nbaseURL:process.env.NODE_ENV==='production'?'':''});/**\n 1. 요청 인터셉터\n 2개의 콜백 함수를 받습니다.\n */instance.interceptors.request.use(function(config){// HTTP Authorization 요청 헤더에 jwt-token을 넣음\n// 서버측 미들웨어에서 이를 확인하고 검증한 후 해당 API에 요청함.\nvar token=store.getState().Auth.token;try{if(token&&jwtUtils.isAuth(token)){config.headers.Authorization=\"Bearer \".concat(token);}return config;}catch(err){console.error('[_axios.interceptors.request] config : '+err);}return config;},function(error){// 요청 에러 직전 호출됩니다.\nreturn Promise.reject(error);});/**\n 2. 응답 인터셉터\n 2개의 콜백 함수를 받습니다.\n */instance.interceptors.response.use(function(response){/*\n        http status가 200인 경우\n        응답 성공 직전 호출됩니다.\n        .then() 으로 이어집니다.\n    */return response;},function(error){/*\n        http status가 200이 아닌 경우\n        응답 에러 직전 호출됩니다.\n        .catch() 으로 이어집니다.\n    */return Promise.reject(error);});export default instance;","map":{"version":3,"names":["axios","store","jwtUtils","instance","create","baseURL","process","env","NODE_ENV","interceptors","request","use","config","token","getState","Auth","isAuth","headers","Authorization","err","console","error","Promise","reject","response"],"sources":["/Users/suni94/dev/dbord-FE-React-main/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\nimport store from \"../redux/configStore\";\nimport {jwtUtils} from \"./jwtUtils\";\n\nconst instance = axios.create({\n  // baseURL: process.env.NODE_ENV === 'production' ? '' : 'https://api.eastflag.co.kr'\n  baseURL: process.env.NODE_ENV === 'production' ? '' : ''\n})\n\n/**\n 1. 요청 인터셉터\n 2개의 콜백 함수를 받습니다.\n */\ninstance.interceptors.request.use(\n  (config) => {\n    // HTTP Authorization 요청 헤더에 jwt-token을 넣음\n    // 서버측 미들웨어에서 이를 확인하고 검증한 후 해당 API에 요청함.\n    const token = store.getState().Auth.token;\n    try {\n      if (token && jwtUtils.isAuth(token)) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n\n      return config;\n    } catch (err) {\n      console.error('[_axios.interceptors.request] config : ' + err);\n    }\n    return config;\n  },\n  (error) => {\n    // 요청 에러 직전 호출됩니다.\n    return Promise.reject(error);\n  }\n);\n\n/**\n 2. 응답 인터셉터\n 2개의 콜백 함수를 받습니다.\n */\ninstance.interceptors.response.use(\n  (response) => {\n    /*\n        http status가 200인 경우\n        응답 성공 직전 호출됩니다.\n        .then() 으로 이어집니다.\n    */\n\n    return response;\n  },\n\n  (error) => {\n    /*\n        http status가 200이 아닌 경우\n        응답 에러 직전 호출됩니다.\n        .catch() 으로 이어집니다.\n    */\n    return Promise.reject(error);\n  }\n);\n\nexport default instance;"],"mappings":"AAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,MAAOC,MAAP,KAAkB,sBAAlB,CACA,OAAQC,QAAR,KAAuB,YAAvB,CAEA,GAAMC,SAAQ,CAAGH,KAAK,CAACI,MAAN,CAAa,CAC5B;AACAC,OAAO,CAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAAzB,CAAwC,EAAxC,CAA6C,EAF1B,CAAb,CAAjB,CAKA;AACA;AACA;AACA,GACAL,QAAQ,CAACM,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACE,SAACC,MAAD,CAAY,CACV;AACA;AACA,GAAMC,MAAK,CAAGZ,KAAK,CAACa,QAAN,GAAiBC,IAAjB,CAAsBF,KAApC,CACA,GAAI,CACF,GAAIA,KAAK,EAAIX,QAAQ,CAACc,MAAT,CAAgBH,KAAhB,CAAb,CAAqC,CACnCD,MAAM,CAACK,OAAP,CAAeC,aAAf,kBAAyCL,KAAzC,EACD,CAED,MAAOD,OAAP,CACD,CAAC,MAAOO,GAAP,CAAY,CACZC,OAAO,CAACC,KAAR,CAAc,0CAA4CF,GAA1D,EACD,CACD,MAAOP,OAAP,CACD,CAfH,CAgBE,SAACS,KAAD,CAAW,CACT;AACA,MAAOC,QAAO,CAACC,MAAR,CAAeF,KAAf,CAAP,CACD,CAnBH,EAsBA;AACA;AACA;AACA,GACAlB,QAAQ,CAACM,YAAT,CAAsBe,QAAtB,CAA+Bb,GAA/B,CACE,SAACa,QAAD,CAAc,CACZ;AACJ;AACA;AACA;AACA,MAEI,MAAOA,SAAP,CACD,CATH,CAWE,SAACH,KAAD,CAAW,CACT;AACJ;AACA;AACA;AACA,MACI,MAAOC,QAAO,CAACC,MAAR,CAAeF,KAAf,CAAP,CACD,CAlBH,EAqBA,cAAelB,SAAf"},"metadata":{},"sourceType":"module"}